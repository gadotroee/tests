{
 "7": "    @clear_session({'spanId': 7})\n    def test_07_get_(self):\n        # GET http://front-end.sock-shop/ (endp 7)\n        front_end_sock_shop = get_http_target('TARGET_FRONT_END_SOCK_SHOP', authenticate)\n        qstr = '?' + urlencode([('XDEBUG_SESSION_START', 'phpstorm')])\n        resp = front_end_sock_shop.get('/' + qstr)\n        resp.assert_status_code(200)\n        resp.assert_cssselect('div#hot div.box div.container div h2', expected_value='Hot this week')\n\n",
 "55": "    @clear_session({'spanId': 55})\n    def test_55_head_(self):\n        # HEAD http://front-end.sock-shop/ (endp 55)\n        front_end_sock_shop = get_http_target('TARGET_FRONT_END_SOCK_SHOP', authenticate)\n        resp = front_end_sock_shop.head('/')\n        resp.assert_status_code(200)\n\n",
 "57": "    @json_dataset('data/dataset_57.json')\n    @clear_session({'spanId': 57})\n    def test_57_get_(self, data_row):\n        content, = data_row\n\n        # GET http://front-end.sock-shop/ (endp 57)\n        front_end_sock_shop = get_http_target('TARGET_FRONT_END_SOCK_SHOP', authenticate)\n        qstr = '?' + urlencode([('a', 'fetch'), ('content', content)])\n        resp = front_end_sock_shop.get('/' + qstr)\n        resp.assert_status_code(200)\n        resp.assert_cssselect('div#hot div.box div.container div h2', expected_value='Hot this week')\n\n",
 "69": "    @clear_session({'spanId': 69})\n    def test_69_get_(self):\n        # GET http://front-end.sock-shop/ (endp 69)\n        front_end_sock_shop = get_http_target('TARGET_FRONT_END_SOCK_SHOP', authenticate)\n        resp = front_end_sock_shop.get('/')\n        resp.assert_status_code(206)\n        resp.assert_cssselect('div#hot div.box div.container div h2', expected_value='Hot this week')\n\n",
 "36": "    @clear_session({'spanId': 36})\n    def test_36_get_address(self):\n        # GET http://front-end.sock-shop/address (endp 36)\n        front_end_sock_shop = get_http_target('TARGET_FRONT_END_SOCK_SHOP', authenticate)\n        resp = front_end_sock_shop.get('/address', headers=dict([('x-requested-with', 'XMLHttpRequest')]))\n        resp.assert_status_code(200)\n        resp.assert_jsonpath('$.city', expected_value='Glasgow')\n\n",
 "11": "    @clear_session({'spanId': 11})\n    def test_11_get_basket_html(self):\n        # GET http://front-end.sock-shop/basket.html (endp 11)\n        front_end_sock_shop = get_http_target('TARGET_FRONT_END_SOCK_SHOP', authenticate)\n        resp = front_end_sock_shop.get('/basket.html')\n        resp.assert_status_code(200)\n        resp.assert_cssselect('div#basket div.box form h1', expected_value='Shopping cart')\n\n",
 "38": "    @clear_session({'spanId': 38})\n    def test_38_get_card(self):\n        # GET http://front-end.sock-shop/card (endp 38)\n        front_end_sock_shop = get_http_target('TARGET_FRONT_END_SOCK_SHOP', authenticate)\n        resp = front_end_sock_shop.get('/card', headers=dict([('x-requested-with', 'XMLHttpRequest')]))\n        resp.assert_status_code(200)\n\n",
 "8": "    @clear_session({'spanId': 8})\n    def test_08_get_cart(self):\n        # GET http://front-end.sock-shop/cart (endp 8)\n        front_end_sock_shop = get_http_target('TARGET_FRONT_END_SOCK_SHOP', authenticate)\n        resp = front_end_sock_shop.get('/cart', headers=dict([('x-requested-with', 'XMLHttpRequest')]))\n        resp.assert_status_code(200)\n\n",
 "12": "    @clear_session({'spanId': 12})\n    def test_12_delete_cart(self):\n        # DELETE http://front-end.sock-shop/cart (endp 12)\n        front_end_sock_shop = get_http_target('TARGET_FRONT_END_SOCK_SHOP', authenticate)\n        resp = front_end_sock_shop.delete('/cart', headers=dict([('x-requested-with', 'XMLHttpRequest')]))\n        resp.assert_status_code(202)\n\n",
 "13": "    @clear_session({'spanId': 13})\n    def test_13_post_cart(self):\n        # POST http://front-end.sock-shop/orders (endp 18)\n        front_end_sock_shop = get_http_target('TARGET_FRONT_END_SOCK_SHOP', authenticate)\n        resp = front_end_sock_shop.post('/orders', headers=dict([('x-requested-with', 'XMLHttpRequest')]))\n        resp.assert_status_code(201)\n        resp.assert_jsonpath('$.address.city', expected_value='Glasgow')\n        id_ = jsonpath('$.items.[*].itemId', resp)\n\n        # POST http://front-end.sock-shop/cart (endp 13)\n        with open('data/payload_for_endp_13.json', 'r') as json_payload_file:\n            json_payload = json.load(json_payload_file)\n        apply_into_json(json_payload, '$.id', id_)\n        resp = front_end_sock_shop.post('/cart', json=json_payload, headers=dict([('x-requested-with', 'XMLHttpRequest')]))\n        resp.assert_status_code(201)\n\n",
 "42": "    @json_dataset('data/dataset_42.json')\n    @clear_session({'spanId': 42})\n    def test_42_get_catalogue_id(self, data_row):\n        size, tags = data_row\n\n        # GET http://front-end.sock-shop/catalogue (endp 9)\n        front_end_sock_shop = get_http_target('TARGET_FRONT_END_SOCK_SHOP', authenticate)\n        qstr = '?' + urlencode([('page', '1'), ('size', size), ('sort', 'id'), ('tags', tags)])\n        resp = front_end_sock_shop.get('/catalogue' + qstr, headers=dict([('x-requested-with', 'XMLHttpRequest')]))\n        resp.assert_status_code(200)\n        id_ = jsonpath('$.[*].id', resp)\n\n        # GET http://front-end.sock-shop/catalogue/{id} (endp 42)\n        resp = front_end_sock_shop.get(f'/catalogue/{id_}', headers=dict([('x-requested-with', 'XMLHttpRequest')]))\n        resp.assert_status_code(200)\n\n",
 "43": "    @clear_session({'spanId': 43})\n    def test_43_get_catalogue_size(self):\n        # GET http://front-end.sock-shop/catalogue/size (endp 43)\n        front_end_sock_shop = get_http_target('TARGET_FRONT_END_SOCK_SHOP', authenticate)\n        qstr = '?' + urlencode([('tags', '')])\n        resp = front_end_sock_shop.get('/catalogue/size' + qstr, headers=dict([('x-requested-with', 'XMLHttpRequest')]))\n        resp.assert_status_code(200)\n\n",
 "15": "    @clear_session({'spanId': 15})\n    def test_15_get_category_html(self):\n        # GET http://front-end.sock-shop/category.html (endp 15)\n        front_end_sock_shop = get_http_target('TARGET_FRONT_END_SOCK_SHOP', authenticate)\n        resp = front_end_sock_shop.get('/category.html')\n        resp.assert_status_code(200)\n        resp.assert_cssselect('div#content div.container div div.panel.panel-default.sidebar-menu div.panel-heading h3.panel-title', expected_value='Filters ')\n\n",
 "45": "    @json_dataset('data/dataset_45.json')\n    @clear_session({'spanId': 45})\n    def test_45_get_customer_order_html(self, data_row):\n        order, = data_row\n\n        # GET http://front-end.sock-shop/customer-order.html (endp 45)\n        front_end_sock_shop = get_http_target('TARGET_FRONT_END_SOCK_SHOP', authenticate)\n        qstr = '?' + urlencode([('order', order)])\n        resp = front_end_sock_shop.get('/customer-order.html' + qstr)\n        resp.assert_status_code(200)\n        resp.assert_cssselect('div#customer-order div.box h2', expected_value='Order #')\n\n",
 "46": "    @clear_session({'spanId': 46})\n    def test_46_get_customer_orders_html(self):\n        # GET http://front-end.sock-shop/customer-orders.html (endp 46)\n        front_end_sock_shop = get_http_target('TARGET_FRONT_END_SOCK_SHOP', authenticate)\n        resp = front_end_sock_shop.get('/customer-orders.html')\n        resp.assert_status_code(200)\n        resp.assert_cssselect('div#customer-orders div.box h1', expected_value='My orders')\n\n",
 "47": "    @json_dataset('data/dataset_47.json')\n    @clear_session({'spanId': 47})\n    def test_47_get_customers_customerId(self, data_row):\n        customerId, = data_row\n\n        # GET http://front-end.sock-shop/customers/{customerId} (endp 47)\n        front_end_sock_shop = get_http_target('TARGET_FRONT_END_SOCK_SHOP', authenticate)\n        resp = front_end_sock_shop.get(f'/customers/{customerId}', headers=dict([('x-requested-with', 'XMLHttpRequest')]))\n        resp.assert_status_code(200)\n        resp.assert_jsonpath('$.lastName', expected_value='Name')\n\n",
 "16": "    @clear_session({'spanId': 16})\n    def test_16_get_detail_html(self):\n        # POST http://front-end.sock-shop/orders (endp 18)\n        front_end_sock_shop = get_http_target('TARGET_FRONT_END_SOCK_SHOP', authenticate)\n        resp = front_end_sock_shop.post('/orders', headers=dict([('x-requested-with', 'XMLHttpRequest')]))\n        resp.assert_status_code(201)\n        resp.assert_jsonpath('$.address.city', expected_value='Glasgow')\n        id_ = jsonpath('$.items.[*].itemId', resp)\n\n        # GET http://front-end.sock-shop/detail.html (endp 16)\n        qstr = '?' + urlencode([('id', id_)])\n        resp = front_end_sock_shop.get('/detail.html' + qstr)\n        resp.assert_status_code(200)\n        resp.assert_cssselect('div#content div.container div div.row.same-height-row div div.box.same-height h3', expected_value='You may also like these products')\n\n",
 "60": "    @clear_session({'spanId': 60})\n    def test_60_get_footer_html(self):\n        # GET http://front-end.sock-shop/footer.html (endp 60)\n        front_end_sock_shop = get_http_target('TARGET_FRONT_END_SOCK_SHOP', authenticate)\n        resp = front_end_sock_shop.get('/footer.html', headers=dict([('x-requested-with', 'XMLHttpRequest')]))\n        resp.assert_status_code(200)\n        resp.assert_cssselect('div#copyright div.container div p.pull-left a', expected_value='Weaveworks')\n\n",
 "17": "    # authentication-related test\n    @clear_session({'spanId': 17})\n    def test_17_get_login(self):\n        # GET http://front-end.sock-shop/login (endp 17)\n        front_end_sock_shop = get_http_target('TARGET_FRONT_END_SOCK_SHOP', dummy_auth)\n        resp = front_end_sock_shop.get('/login')\n        resp.assert_status_code(200)\n        resp.assert_cssselect('p', expected_value='Cookie is set')\n\n",
 "61": "    @clear_session({'spanId': 61})\n    def test_61_get_navbar_html(self):\n        # GET http://front-end.sock-shop/navbar.html (endp 61)\n        front_end_sock_shop = get_http_target('TARGET_FRONT_END_SOCK_SHOP', authenticate)\n        resp = front_end_sock_shop.get('/navbar.html', headers=dict([('x-requested-with', 'XMLHttpRequest')]))\n        resp.assert_status_code(200)\n\n",
 "51": "    @clear_session({'spanId': 51})\n    def test_51_get_orders_href(self):\n        # GET http://front-end.sock-shop/orders (endp 49)\n        front_end_sock_shop = get_http_target('TARGET_FRONT_END_SOCK_SHOP', authenticate)\n        resp = front_end_sock_shop.get('/orders', headers=dict([('x-requested-with', 'XMLHttpRequest')]))\n        resp.assert_status_code(201)\n        resp.assert_jsonpath('$.[*].address.city', expected_value='Glasgow')\n        href = url_part('/2', jsonpath('$.[*]._links.self.href', resp))\n\n        # GET http://front-end.sock-shop/orders/{href} (endp 51)\n        resp = front_end_sock_shop.get(f'/orders/{href}', headers=dict([('x-requested-with', 'XMLHttpRequest')]))\n        resp.assert_status_code(200)\n        resp.assert_jsonpath('$.address.city', expected_value='Glasgow')\n\n",
 "52": "    @clear_session({'spanId': 52})\n    def test_52_get_tags(self):\n        # GET http://front-end.sock-shop/tags (endp 52)\n        front_end_sock_shop = get_http_target('TARGET_FRONT_END_SOCK_SHOP', authenticate)\n        resp = front_end_sock_shop.get('/tags', headers=dict([('x-requested-with', 'XMLHttpRequest')]))\n        resp.assert_status_code(200)\n\n",
 "62": "    @clear_session({'spanId': 62})\n    def test_62_get_topbar_html(self):\n        # GET http://front-end.sock-shop/topbar.html (endp 62)\n        front_end_sock_shop = get_http_target('TARGET_FRONT_END_SOCK_SHOP', authenticate)\n        resp = front_end_sock_shop.get('/topbar.html', headers=dict([('x-requested-with', 'XMLHttpRequest')]))\n        resp.assert_status_code(200)\n        resp.assert_cssselect('div#top div.container div.offer a.btn.btn-success.btn-sm', expected_value='Offer of the day')\n\n",
 "22": "    @json_dataset('data/dataset_22.json')\n    @clear_session({'spanId': 22})\n    def test_22_delete_carts_customerId(self, data_row):\n        address, card, customer, items = data_row\n\n        # POST http://orders.sock-shop/orders (endp 29)\n        orders_sock_shop = get_http_target('TARGET_ORDERS_SOCK_SHOP', authenticate)\n        with open('data/payload_for_endp_29.json', 'r') as json_payload_file:\n            json_payload = json.load(json_payload_file)\n        apply_into_json(json_payload, '$.address', address)\n        apply_into_json(json_payload, '$.card', card)\n        apply_into_json(json_payload, '$.customer', customer)\n        apply_into_json(json_payload, '$.items', items)\n        resp = orders_sock_shop.post('/orders', json=json_payload, headers=dict([('accept', 'application/json')]))\n        resp.assert_status_code(201)\n        resp.assert_jsonpath('$.address.city', expected_value='Glasgow')\n        customerId = jsonpath('$.customerId', resp)\n\n        # DELETE http://carts.sock-shop/carts/{customerId} (endp 22)\n        carts_sock_shop = get_http_target('TARGET_CARTS_SOCK_SHOP', authenticate)\n        resp = carts_sock_shop.delete(f'/carts/{customerId}')\n        resp.assert_status_code(202)\n\n",
 "23": "    @json_dataset('data/dataset_23.json')\n    @clear_session({'spanId': 23})\n    def test_23_post_carts_customerId_items(self, data_row):\n        address, card, customer, items = data_row\n\n        # POST http://orders.sock-shop/orders (endp 29)\n        orders_sock_shop = get_http_target('TARGET_ORDERS_SOCK_SHOP', authenticate)\n        with open('data/payload_for_endp_29.json', 'r') as json_payload_file:\n            json_payload = json.load(json_payload_file)\n        apply_into_json(json_payload, '$.address', address)\n        apply_into_json(json_payload, '$.card', card)\n        apply_into_json(json_payload, '$.customer', customer)\n        apply_into_json(json_payload, '$.items', items)\n        resp = orders_sock_shop.post('/orders', json=json_payload, headers=dict([('accept', 'application/json')]))\n        resp.assert_status_code(201)\n        resp.assert_jsonpath('$.address.city', expected_value='Glasgow')\n        customerId = jsonpath('$.customerId', resp)\n\n        # GET http://carts.sock-shop/carts/{customerId}/items (endp 5)\n        carts_sock_shop = get_http_target('TARGET_CARTS_SOCK_SHOP', authenticate)\n        resp = carts_sock_shop.get(f'/carts/{customerId}/items', headers=dict([('accept', 'application/json')]))\n        resp.assert_status_code(200)\n        itemId = jsonpath('$.[*].itemId', resp)\n        unitPrice = jsonpath('$.[*].unitPrice', resp)\n\n        # POST http://carts.sock-shop/carts/{customerId}/items (endp 23)\n        with open('data/payload_for_endp_23.json', 'r') as json_payload_file:\n            json_payload = json.load(json_payload_file)\n        apply_into_json(json_payload, '$.itemId', itemId)\n        apply_into_json(json_payload, '$.unitPrice', unitPrice)\n        resp = carts_sock_shop.post(f'/carts/{customerId}/items', json=json_payload, headers=dict([('accept', 'application/json')]))\n        resp.assert_status_code(201)\n\n",
 "24": "    @json_dataset('data/dataset_24.json')\n    @clear_session({'spanId': 24})\n    def test_24_get_carts_customerId_merge(self, data_row):\n        address, card, customer, items, sessionId = data_row\n\n        # POST http://orders.sock-shop/orders (endp 29)\n        orders_sock_shop = get_http_target('TARGET_ORDERS_SOCK_SHOP', authenticate)\n        with open('data/payload_for_endp_29.json', 'r') as json_payload_file:\n            json_payload = json.load(json_payload_file)\n        apply_into_json(json_payload, '$.address', address)\n        apply_into_json(json_payload, '$.card', card)\n        apply_into_json(json_payload, '$.customer', customer)\n        apply_into_json(json_payload, '$.items', items)\n        resp = orders_sock_shop.post('/orders', json=json_payload, headers=dict([('accept', 'application/json')]))\n        resp.assert_status_code(201)\n        resp.assert_jsonpath('$.address.city', expected_value='Glasgow')\n        customerId = jsonpath('$.customerId', resp)\n\n        # GET http://carts.sock-shop/carts/{customerId}/merge (endp 24)\n        carts_sock_shop = get_http_target('TARGET_CARTS_SOCK_SHOP', authenticate)\n        qstr = '?' + urlencode([('sessionId', sessionId)])\n        resp = carts_sock_shop.get(f'/carts/{customerId}/merge' + qstr)\n        resp.assert_status_code(202)\n\n",
 "19": "    @json_dataset('data/dataset_19.json')\n    @clear_session({'spanId': 19})\n    def test_19_get_catalogue_id(self, data_row):\n        size, tags = data_row\n\n        # GET http://catalogue.sock-shop/catalogue (endp 20)\n        catalogue_sock_shop = get_http_target('TARGET_CATALOGUE_SOCK_SHOP', authenticate)\n        qstr = '?' + urlencode([('page', '1'), ('size', size), ('sort', 'id'), ('tags', tags)])\n        resp = catalogue_sock_shop.get('/catalogue' + qstr)\n        resp.assert_status_code(200)\n        id_ = jsonpath('$.[*].id', resp)\n\n        # GET http://catalogue.sock-shop/catalogue/{id} (endp 19)\n        resp = catalogue_sock_shop.get(f'/catalogue/{id_}')\n        resp.assert_status_code(200)\n\n",
 "33": "    @clear_session({'spanId': 33})\n    def test_33_get_catalogue_size(self):\n        # GET http://catalogue.sock-shop/catalogue/size (endp 33)\n        catalogue_sock_shop = get_http_target('TARGET_CATALOGUE_SOCK_SHOP', authenticate)\n        qstr = '?' + urlencode([('tags', '')])\n        resp = catalogue_sock_shop.get('/catalogue/size' + qstr)\n        resp.assert_status_code(200)\n\n",
 "35": "    @clear_session({'spanId': 35})\n    def test_35_get_tags(self):\n        # GET http://catalogue.sock-shop/tags (endp 35)\n        catalogue_sock_shop = get_http_target('TARGET_CATALOGUE_SOCK_SHOP', authenticate)\n        resp = catalogue_sock_shop.get('/tags')\n        resp.assert_status_code(200)\n\n",
 "26": "    @json_dataset('data/dataset_26.json')\n    @clear_session({'spanId': 26})\n    def test_26_get_customers_customerId_addresses(self, data_row):\n        address, card, customer, items = data_row\n\n        # POST http://orders.sock-shop/orders (endp 29)\n        orders_sock_shop = get_http_target('TARGET_ORDERS_SOCK_SHOP', authenticate)\n        with open('data/payload_for_endp_29.json', 'r') as json_payload_file:\n            json_payload = json.load(json_payload_file)\n        apply_into_json(json_payload, '$.address', address)\n        apply_into_json(json_payload, '$.card', card)\n        apply_into_json(json_payload, '$.customer', customer)\n        apply_into_json(json_payload, '$.items', items)\n        resp = orders_sock_shop.post('/orders', json=json_payload, headers=dict([('accept', 'application/json')]))\n        resp.assert_status_code(201)\n        resp.assert_jsonpath('$.address.city', expected_value='Glasgow')\n        customerId = jsonpath('$.customerId', resp)\n\n        # GET http://user.sock-shop/customers/{customerId}/addresses (endp 26)\n        user_sock_shop = get_http_target('TARGET_USER_SOCK_SHOP', authenticate)\n        resp = user_sock_shop.get(f'/customers/{customerId}/addresses')\n        resp.assert_status_code(200)\n        resp.assert_jsonpath('$._embedded.address.[*].city', expected_value='Glasgow')\n\n",
 "27": "    @json_dataset('data/dataset_27.json')\n    @clear_session({'spanId': 27})\n    def test_27_get_customers_customerId_cards(self, data_row):\n        address, card, customer, items = data_row\n\n        # POST http://orders.sock-shop/orders (endp 29)\n        orders_sock_shop = get_http_target('TARGET_ORDERS_SOCK_SHOP', authenticate)\n        with open('data/payload_for_endp_29.json', 'r') as json_payload_file:\n            json_payload = json.load(json_payload_file)\n        apply_into_json(json_payload, '$.address', address)\n        apply_into_json(json_payload, '$.card', card)\n        apply_into_json(json_payload, '$.customer', customer)\n        apply_into_json(json_payload, '$.items', items)\n        resp = orders_sock_shop.post('/orders', json=json_payload, headers=dict([('accept', 'application/json')]))\n        resp.assert_status_code(201)\n        resp.assert_jsonpath('$.address.city', expected_value='Glasgow')\n        customerId = jsonpath('$.customerId', resp)\n\n        # GET http://user.sock-shop/customers/{customerId}/cards (endp 27)\n        user_sock_shop = get_http_target('TARGET_USER_SOCK_SHOP', authenticate)\n        resp = user_sock_shop.get(f'/customers/{customerId}/cards')\n        resp.assert_status_code(200)\n\n",
 "28": "    # authentication-related test\n    @clear_session({'spanId': 28})\n    def test_28_get_login(self):\n        # GET http://user.sock-shop/login (endp 28)\n        user_sock_shop = get_http_target('TARGET_USER_SOCK_SHOP', dummy_auth)\n        resp = user_sock_shop.get('/login')\n        resp.assert_status_code(200)\n\n",
 "54": "    @json_dataset('data/dataset_54.json')\n    @clear_session({'spanId': 54})\n    def test_54_get_orders_href(self, data_row):\n        address, card, customer, items = data_row\n\n        # POST http://orders.sock-shop/orders (endp 29)\n        orders_sock_shop = get_http_target('TARGET_ORDERS_SOCK_SHOP', authenticate)\n        with open('data/payload_for_endp_29.json', 'r') as json_payload_file:\n            json_payload = json.load(json_payload_file)\n        apply_into_json(json_payload, '$.address', address)\n        apply_into_json(json_payload, '$.card', card)\n        apply_into_json(json_payload, '$.customer', customer)\n        apply_into_json(json_payload, '$.items', items)\n        resp = orders_sock_shop.post('/orders', json=json_payload, headers=dict([('accept', 'application/json')]))\n        resp.assert_status_code(201)\n        resp.assert_jsonpath('$.address.city', expected_value='Glasgow')\n        custId = jsonpath('$.customerId', resp)\n\n        # GET http://orders.sock-shop/orders/search/customerId (endp 31)\n        qstr = '?' + urlencode([('custId', custId), ('sort', 'date')])\n        resp = orders_sock_shop.get('/orders/search/customerId' + qstr)\n        resp.assert_status_code(200)\n        resp.assert_jsonpath('$._embedded.customerOrders.[*].address.city', expected_value='Glasgow')\n        href = url_part('/2', jsonpath('$._embedded.customerOrders.[*]._links.self.href', resp))\n\n        # GET http://orders.sock-shop/orders/{href} (endp 54)\n        resp = orders_sock_shop.get(f'/orders/{href}')\n        resp.assert_status_code(200)\n        resp.assert_jsonpath('$.address.city', expected_value='Glasgow')\n\n",
 "4": "    @json_dataset('data/dataset_4.json')\n    @clear_session({'spanId': 4})\n    def test_04_post_paymentAuth(self, data_row):\n        address, addresseId, amount, card, cardId, customer, items, longNum, number = data_row\n\n        # POST http://orders.sock-shop/orders (endp 29)\n        orders_sock_shop = get_http_target('TARGET_ORDERS_SOCK_SHOP', authenticate)\n        with open('data/payload_for_endp_29.json', 'r') as json_payload_file:\n            json_payload = json.load(json_payload_file)\n        apply_into_json(json_payload, '$.address', address)\n        apply_into_json(json_payload, '$.card', card)\n        apply_into_json(json_payload, '$.customer', customer)\n        apply_into_json(json_payload, '$.items', items)\n        resp = orders_sock_shop.post('/orders', json=json_payload, headers=dict([('accept', 'application/json')]))\n        resp.assert_status_code(201)\n        resp.assert_jsonpath('$.address.city', expected_value='Glasgow')\n        customerId = jsonpath('$.customerId', resp)\n\n        # GET http://user.sock-shop/customers/{customerId} (endp 3)\n        user_sock_shop = get_http_target('TARGET_USER_SOCK_SHOP', authenticate)\n        resp = user_sock_shop.get(f'/customers/{customerId}', headers=dict([('accept', 'application/hal+json')]))\n        resp.assert_status_code(200)\n        resp.assert_jsonpath('$.lastName', expected_value='Name')\n        firstName = jsonpath('$.firstName', resp)\n\n        # GET http://user.sock-shop/addresses/{addresseId} (endp 1)\n        resp = user_sock_shop.get(f'/addresses/{addresseId}', headers=dict([('accept', 'application/hal+json')]))\n        resp.assert_status_code(200)\n        resp.assert_jsonpath('$.city', expected_value='Glasgow')\n        country = jsonpath('$.country', resp)\n        postcode = jsonpath('$.postcode', resp)\n        street = jsonpath('$.street', resp)\n\n        # GET http://user.sock-shop/cards/{cardId} (endp 2)\n        resp = user_sock_shop.get(f'/cards/{cardId}', headers=dict([('accept', 'application/hal+json')]))\n        resp.assert_status_code(200)\n        ccv = jsonpath('$.ccv', resp)\n        expires = jsonpath('$.expires', resp)\n\n        # POST http://payment.sock-shop/paymentAuth (endp 4)\n        payment_sock_shop = get_http_target('TARGET_PAYMENT_SOCK_SHOP', authenticate)\n        with open('data/payload_for_endp_4.json', 'r') as json_payload_file:\n            json_payload = json.load(json_payload_file)\n        apply_into_json(json_payload, '$.address.country', country)\n        apply_into_json(json_payload, '$.address.number', number)\n        apply_into_json(json_payload, '$.address.postcode', postcode)\n        apply_into_json(json_payload, '$.address.street', street)\n        apply_into_json(json_payload, '$.amount', amount)\n        apply_into_json(json_payload, '$.card.ccv', ccv)\n        apply_into_json(json_payload, '$.card.expires', expires)\n        apply_into_json(json_payload, '$.card.longNum', longNum)\n        resp = payment_sock_shop.post('/paymentAuth', json=json_payload, headers=dict([('accept', 'application/json')]))\n        resp.assert_status_code(200)\n\n",
 "6": "    @json_dataset('data/dataset_6.json')\n    @clear_session({'spanId': 6})\n    def test_06_post_shipping(self, data_row):\n        name, = data_row\n\n        # POST http://shipping.sock-shop/shipping (endp 6)\n        shipping_sock_shop = get_http_target('TARGET_SHIPPING_SOCK_SHOP', authenticate)\n        with open('data/payload_for_endp_6.json', 'r') as json_payload_file:\n            json_payload = json.load(json_payload_file)\n        apply_into_json(json_payload, '$.id', str(uuid.uuid4()))\n        apply_into_json(json_payload, '$.name', name)\n        resp = shipping_sock_shop.post('/shipping', json=json_payload, headers=dict([('accept', 'application/json')]))\n        resp.assert_status_code(201)\n\n"
}